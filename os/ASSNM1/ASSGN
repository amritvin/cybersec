1.
CFLAGS and CxxFLAGS are conventionally used in makefile for c and c++ respectively.
It enables the addition of switches for the C compiler. CXXFLAGS is meant to be used when invoking a C++ compiler.
___________________________________________________________________________________________________________________________________________
2.mkdisk
wrdisk 28 hello
rddisk 28
!od -x D1.dsk > d1.txt
quit
 When mkdisk is given a disk D1 is created of size 124 blocks each with 512 bytes.
Wrdisk is function for writing into the the disk. The given input is written to the disk .
Rddisk reads the content of the disk D1.dsk
Then that data is converted into hexa-decimal format (-x) is used for that.
___________________________________________________________________________________________________________________________________________
3.
The indent program can be used to make code easier to read.
It can also convert from one style of writing C to another.
indent understands a substantial amount about the syntax of C,
___________________________________________________________________________________________________________________________________________
4.
fopen	: opens the file whose name is the string pointed to by path and associates a stream with it. Open for reading and appending (writing at end of file). The file is created if it does not exist. The initial file position for reading is at the beginning of the file, but output is always appended to the end of the file.

fclose	:	The fclose() function flushes the stream pointed to by stream
       (writing any buffered output data using fflush(3)) and closes the
       underlying file descriptor.


fread	:The function fread() reads nmemb items of data, each size bytes long,
       from the stream pointed to by stream, storing them at the location
       given by ptr.

       The function fwrite() writes nmemb items of data, each size bytes
       long, to the stream pointed to by stream, obtaining them from the
       location given by ptr.

       For nonlocking counterparts, see unlocked_stdio(3).




 
fwrite	:The function fread() reads nmemb elements of data, each size bytes long, from the stream pointed to by stream, storing them at the location given by ptr.
The function fwrite() writes nmemb elements of data, each size bytes long, to the stream pointed to by stream, obtaining them from the location given by ptr.
For nonlocking counterparts, see unlocked_stdio(3).


fstat	: identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd.
stats the file pointed to by path and fills in buf.
These functions return information about a file. No permissions are required on the file itself, but-in the case of stat() and lstat() - execute (search) permission is required on all of the directories in path that lead to the file

fscanf	:reads input from the stream pointer stream, and
    


fprintf	: printf(), fprintf(), sprintf(), snprintf(), respectively, except that they are called with a va_list instead of a variable number of arguments. These functions do not call the va_end macro. Because they invoke the va_arg macro, the value of ap is undefined after the call. See stdarg(3).

printf	:The functions printf() andvprintf() write output to stdout, the standard output stream; fprintf() and vfprintf() write output to the given output stream; sprintf(), snprintf(), vsprintf() and vsnprintf() write to the character string str.

sprintf	:snprintf() and vsnprintf() write at most size bytes (including the terminating null byte ('\0')) to str.
___________________________________________________________________________________________________________________________________________
5.
mprotect
Mmap
Arch_prctl
lseek
strtok

___________________________________________________________________________________________________________________________________________
6.

1.Strcmp
2.Strcmp
3.Strlen
4.puts
5.strncpy
6.sprintf
___________________________________________________________________________________________________________________________________________
7.

void doQuit(Arg * a)
{
  releaseCfv();
  releaseSimDisk();
  exit(0);
}
It Exits from the above function after it reallocate, the disk space a calls exit(0) to quit from the loop and hence from the shell.
___________________________________________________________________________________________________________________________________________
8.Since 

0	Standard input		STDIN_FILENO		stdin
1	Standard output		STDOUT_FILENO		stdout
2	Standard error		STDERR_FILENO		stderr
And therefore fd is  assigned less than 3. In this P0 it is set to 3 always and therefore it is checked with 3
___________________________________________________________________________________________________________________________________________
9.
 
Exists will get the value 1 if the size becomes equal.
___________________________________________________________________________________________________________________________________________
10.

This format is comfortable, because it is so similar to context of theories of operating systems.
___________________________________________________________________________________________________________________________________________

